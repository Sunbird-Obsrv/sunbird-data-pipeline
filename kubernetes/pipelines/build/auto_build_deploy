@Library('deploy-conf') _
node('build-slave') {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        ansiColor('xterm') {
            withEnv(["JAVA_HOME=${JAVA11_HOME}"]) {
                stage('Checkout') {
                    tag_name = env.JOB_NAME.split("/")[-1]
                    pre_checks()
                    if (!env.hub_org) {
                        println(ANSI_BOLD + ANSI_RED + "Uh Oh! Please set a Jenkins environment variable named hub_org with value as registery/sunbidrded" + ANSI_NORMAL)
                        error 'Please resolve the errors and rerun..'
                    } else
                        println(ANSI_BOLD + ANSI_GREEN + "Found environment variable named hub_org with value as: " + hub_org + ANSI_NORMAL)
                }
                cleanWs()
                def scmVars = checkout scm
                checkout scm: [$class: 'GitSCM', branches: [[name: "refs/tags/$tag_name"]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                build_tag = tag_name + "_" + env.BUILD_NUMBER
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                artifact_version = tag_name + "_" + commit_hash
                echo "build_tag: " + build_tag

                //   stage Build
                         env.NODE_ENV = "build"
                         print "Environment will be : ${env.NODE_ENV}"
                         dir('data-pipeline-flink'){
                         sh '/opt/apache-maven-3.6.3/bin/mvn3.6 clean install -DskipTests'
                }        

                //   stage Package
                         dir('data-pipeline-flink/sunbird-dp-distribution') {
                         sh "/opt/apache-maven-3.6.3/bin/mvn3.6 package -Pbuild-docker-image -Drelease-version=${build_tag}"
                }


                //   stage Retagging
                         sh """
                            docker tag sunbird-datapipeline:${build_tag} ${hub_org}/sunbird-datapipeline:${build_tag}
                            echo {\\"image_name\\" : \\"sunbird-datapipeline\\", \\"image_tag\\" : \\"${build_tag}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json
                            """

               //   stage ArchiveArtifacts
                        archiveArtifacts "metadata.json"
                        currentBuild.description = "${build_tag}"


            }
            currentBuild.result = "SUCCESS"
            slack_notify(currentBuild.result, tag_name)
            email_notify()
            auto_build_deploy()
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        slack_notify(currentBuild.result, tag_name)
        email_notify()
        throw err
    }
}
