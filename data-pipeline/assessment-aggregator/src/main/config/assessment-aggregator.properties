# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

####Environment

# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=__env__.AssessmentAggregator

# YARN
yarn.package.path=http://__yarn_host__:__yarn_port__/__env__/${project.artifactId}-${pom.version}-distribution.tar.gz
job.container.count=__assessment_aggregator_yarn_container_count__


# Task
task.class=org.ekstep.ep.samza.task.AssessmentAggregatorTask
task.inputs=kafka.__env__.telemetry.assess
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=__samza_checkpoint_replication_factor__
task.commit.ms=60000
task.window.ms=300000

# Metrics
metrics.reporters=snapshot,jmx
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.__env__.metrics
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=string
systems.kafka.samza.key.serde=string
systems.kafka.streams.__env__.metrics.samza.msg.serde=metrics
# systems.kafka.consumer.zookeeper.connect=localhost:2181/
systems.kafka.consumer.zookeeper.connect=__ingestion_zookeepers__
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.samza.offset.default=oldest
systems.kafka.producer.bootstrap.servers=__ingestion_kafka_brokers__
systems.kafka.consumer.fetch.message.max.bytes=__assessment_aggregator_consumer_fetch_max_bytes__
systems.kafka.producer.max.request.size=__assessment_aggregator_consumer_fetch_max_bytes__
systems.kafka.samza.fetch.threshold=__assessment_aggregator_messages_fetch_threshold__


## Job Coordinator
job.coordinator.system=kafka
job.coordinator.replication.factor=__samza_checkpoint_replication_factor__

output.failed.topic.name=__env__.telemetry.assess.failed
output.metrics.topic.name=__env__.pipeline_metrics
output.prometheus.metrics.topic.name=__env__.prom.monitoring.metrics
pipeline.metrics.list=db-hit-count,db-insert-count,db-update-count


# sunbird middleware cassandra config
middleware.cassandra.host=__middleware_cassandra_host__
middleware.cassandra.port=__middleware_cassandra_port__
middleware.cassandra.courses_keyspace=__middleware_cassandra__courses_keyspace__
middleware.cassandra.aggregator_table=__middleware_cassandra_assessment_aggregator_table__
middleware.cassandra.question_type=__middleware_cassandra_assessment_question_type__

# Redis
redis.host=__metadata_redis_host__
redis.port=__metadata_redis_port__
redis.connection.max=1
redis.connection.idle.max=1
redis.connection.idle.min=1
redis.connection.minEvictableIdleTimeSeconds=120
redis.connection.timeBetweenEvictionRunsSeconds=300
location.db.redis.key.expiry.seconds=__location_db_redis_key_expiry_seconds__

redis.courseDB.index=11

content.leafnodes.ttl=3600
kp.content_service.base_url=__kp_content_service_base_url__
