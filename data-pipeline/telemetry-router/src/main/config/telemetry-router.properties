# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=__env__.TelemetryRouter

# YARN
#yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-distribution.tar.gz
yarn.package.path=http://__yarn_host__:__yarn_port__/__env__/${project.artifactId}-${pom.version}-distribution.tar.gz
#yarn.package.path=http://172.31.12.23:8000/${project.artifactId}-${pom.version}-distribution.tar.gz
job.container.count=__telemetry_router_yarn_container_count__

# Task
task.class=org.ekstep.ep.samza.task.TelemetryRouterTask
task.inputs=kafka.__env__.telemetry.unique,kafka.__env__.telemetry.derived.unique
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=__samza_checkpoint_replication_factor__
task.commit.ms=60000
task.window.ms=300000



# Metrics
metrics.reporters=snapshot
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.__env__.metrics

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.key.serde=string
systems.kafka.samza.msg.serde=string
# systems.kafka.consumer.zookeeper.connect=localhost:2181/
systems.kafka.consumer.zookeeper.connect=__zookeepers__
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.samza.offset.default=oldest
systems.kafka.producer.bootstrap.servers=__kafka_brokers__
systems.kafka.streams.__env__.metrics.samza.msg.serde=metrics
systems.kafka.consumer.fetch.message.max.bytes=__consumer_fetch_max_bytes__
systems.kafka.producer.max.request.size=__producer_max_request_size_bytes__

systems.kafka.streams.__env__.telemetry.derived.unique.samza.priority=1

# Job Coordinator
job.coordinator.system=kafka
job.coordinator.replication.factor=__samza_checkpoint_replication_factor__

router.events.primary.route.topic=__env__.telemetry.sink
router.events.secondary.route.events=__tr_secondary_route_events__
router.events.secondary.route.topic=__env__.telemetry.log
router.events.audit.route.topic=__env__.telemetry.audit
router.events.share.route.topic=__env__.telemetry.share
output.failed.topic.name=__env__.telemetry.failed
output.malformed.topic.name=__env__.telemetry.malformed
output.metrics.topic.name=__env__.pipeline_metrics
output.prometheus.metrics.topic.name=__env__.prom.monitoring.metrics
router.events.log.topic.name=__env__.events.log
router.events.error.topic.name=__env__.events.error
pipeline.metrics.list=error-message-count,primary-route-success-count,secondary-route-success-count,audit-route-success-count,log-route-success-count,error-route-success-count
