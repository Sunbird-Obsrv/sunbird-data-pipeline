- name: Create the directory
  file: path={{ redis_backup_dir }}/{{ item.value.name }} state=directory recurse=yes
  with_dict: "{{ redis.config }}"

- set_fact:
    redis_backup_file_name: "redis-backup-{{ lookup('pipe', 'date +%Y-%m-%d-%T') }}-{{ ansible_hostname }}.zip"
 
- name: copy dump.rdb files
  copy:
    src: "{{ redis_data_dir }}/{{ item.value.name }}-dump.rdb"
    dest: "{{ redis_backup_dir }}/{{ item.value.name }}/{{ item.value.name }}-dump.rdb"
    remote_src: yes
  with_dict: "{{ redis.config }}"

- name: Create archive of backup directory
  archive: path="{{ redis_backup_dir }}/{{ item.value.name }}/*" dest="{{ redis_backup_dir }}/{{ item.value.name }}/{{ redis_backup_file_name }}" format=zip remove=yes
  async: 3600
  poll: 10
  with_dict: "{{ redis.config }}"

- name: upload file to azure storage
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-upload.yml
  vars:
    blob_container_name: "{{ cloud_storage_dpredisbackup_foldername }}"
    container_public_access: "off"
    blob_file_name: "{{ item.value.name }}/{{ redis_backup_file_name }}"
    local_file_or_folder_path: "{{ redis_backup_dir }}/{{ item.value.name }}/{{ redis_backup_file_name }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  with_dict: "{{ redis.config }}"  
  when: cloud_service_provider == "azure"

- name: upload backup to S3
  include_role:
    name: aws-cloud-storage
    tasks_from: upload-folder.yml
  vars:
    local_file_or_folder_path: "{{ redis_backup_dir }}/*"
    s3_bucket_name: "{{ cloud_storage_dpredisbackup_bucketname }}"
    s3_path: "{{ cloud_storage_dpredisbackup_foldername }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
  when: cloud_service_provider == "aws"
   
- name: upload files to gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: upload-batch.yml
  vars:
    gcp_storage_service_account_name: "{{ cloud_management_storage_accountname }}"
    gcp_storage_key_file: "{{ cloud_management_storage_secret }}"
    gcp_bucket_name: "{{ cloud_storage_dpredisbackup_bucketname }}"
    gcp_path: "{{ cloud_storage_dpredisbackup_foldername }}"
    local_file_or_folder_path: "{{ redis_backup_dir }}/*"
  when: cloud_service_provider == "gcloud"

- name: clean up backup dir after upload
  file: path={{ redis_backup_dir }} state=absent
