---
# file: install.yml

- name: Create druid user
  user:
    name: "{{ druid_user }}"

- name: Create druid deploy directory
  file: path={{ druid_directory }} state=directory mode=0777
        owner={{ druid_user }}

- name: Create druid tmp dir for all nodes
  file: path={{ druid_default_tmp_dir }} state=directory mode=0777
        owner={{ druid_user }}

- name: Create druid logging directory for all nodes
  file: path={{ druid_log_dir }} state=directory mode=0777
        owner={{ druid_user }}

- name: Create gc dir for all nodes
  file: path={{ druid_gc_logdir }} state=directory mode=0755
        owner={{ druid_user }}

- name: Create tmp dir only for historical nodes
  file: path={{ druid_historical_tmp_dir }} state=directory mode=0777
        owner={{ druid_user }}
  when: druid_role == "historical"

- name: Create segment cache dir only for historical nodes
  file: path={{ druid_historical_segmentcache_path }} state=directory mode=0755
        owner={{ druid_user }}
  when: druid_role == "historical"

- name: Create  indexing task dir  only for middlemanager nodes
  file: path={{ druid_indexing_task_basedir }} state=directory mode=0755
        owner={{ druid_user }}
  when: druid_role == "middlemanager"

- name: Create peon segement cache dir only for middlemanager nodes
  file: path={{ druid_middlemanager_peon_segmentcache_path }} state=directory mode=0755
        owner={{ druid_user }}
  when: druid_role == "middlemanager"

- name: Create indexing log dir only for middlemanager nodes
  file: path={{ druid_indexing_log_dir }} state=directory mode=0755
        owner={{ druid_user }}
  when: druid_role == "middlemanager"

- name: To check if the druid directory exists
  stat:
    path: "{{ druid_folder }}"
  register: check_druid_exist

- name: Download Druid version {{ druid_version }}
  get_url: url={{ druid_url }}
           dest={{ druid_directory }}
           mode=0777
           force=no
  when: not check_druid_exist.stat.exists and not check_druid_exist.stat.isdir is defined 

- name: Un-tar druid download
  unarchive: src={{ druid_folder }}-bin.tar.gz dest={{ druid_directory }} copy=no
  when: not check_druid_exist.stat.exists and not check_druid_exist.stat.isdir is defined

- name: Change ownership of download path
  file: path={{ druid_directory }} owner={{ druid_user }} recurse=yes mode=0777
  when: not check_druid_exist.stat.exists and not check_druid_exist.stat.isdir is defined

- name: Create symbolic link 
  file:
    src: "{{ druid_folder }}"
    dest: "{{ druid_symlink }}"
    state: link

- name: Execute command for extensions
  shell: /usr/bin/java -classpath "lib/*" -Ddruid.extensions.directory="{{ druid_path }}extensions" org.apache.druid.cli.Main tools pull-deps --no-default-hadoop -c "org.apache.druid.extensions.contrib:{{ item }}:{{ druid_version }}"
  with_items: "{{ druid_community_extensions }}"
  args: 
    chdir: "{{ druid_path }}"
    executable: /bin/bash

# Druid configurations:
- name: Copy common.properties for Druid node {{ druid_role }}
  template: src=_common/common.runtime.properties dest={{ druid_path }}conf/druid/_common/
        owner={{ druid_user }} mode=0755

- name: Copy log4j2.xml for Druid node {{ druid_role }}
  template: src={{ druid_role }}/log4j2.xml dest={{ druid_path }}conf/druid/{{ service }}/
        owner={{ druid_user }} mode=0755

- name: Copy over specific configuration for Druid node {{ druid_role }}
  template: src={{ druid_role }}/runtime.properties dest={{ druid_path }}conf/druid/{{ service }}
        owner={{ druid_user }} mode=0755


- name: Copy over jvm configuration for Druid node {{ druid_role }}
  template: src={{ druid_role }}/jvm.config dest={{ druid_path }}conf/druid/{{ service }}
        owner={{ druid_user }} mode=0755

- name: Copy the graphite whitelist file
  copy:
    src: files/whitelist
    dest: "{{ druid_path }}whitelist"
    owner: "{{ druid_user }}"
    mode: 755

- name: Copy over systemd service file for druid role {{ druid_role }}
  template: src=druid.service dest=/lib/systemd/system/druid_{{ druid_role }}.service

- name: Start druid {{ druid_role }} service
  systemd:
    name: druid_{{ druid_role }}
    state: restarted
    daemon_reload: yes
    enabled: yes
