- name: ensure restore dir exists
  file: path="{{ postgresql_restore_dir }}" state=directory owner={{ postgresql_user }} group={{ postgresql_user }}

- set_fact:
    postgresql_restore_gzip_file_path: "{{ postgresql_restore_dir }}/postgresql_backup_{{ postgresql_restore_gzip_file_date }}.sql.gz"

- name: Download restore file from azure
  command: az storage blob download --container-name {{ postgresql_restore_azure_container_name }} --name postgresql_backup_{{ postgresql_restore_gzip_file_date }}.sql.gz --file {{ postgresql_restore_gzip_file_path }}
  environment:
    AZURE_STORAGE_ACCOUNT: "{{sunbird_management_storage_account_name}}"
    AZURE_STORAGE_KEY: "{{sunbird_management_storage_account_key}}"
  async: 3600
  poll: 10

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_bucket_name: "{{ gcloud_management_bucket_name }}"
    dest_folder_name: "{{ postgresql_restore_storage }}"
    dest_file_name: "{{ postgresql_restore_gzip_file_name }}"
    local_file_or_folder_path: "{{ postgresql_restore_gzip_file_path }}"
  when: cloud_service_provider == "gcloud"

- name: ensure postgresql service is stopped
  service: name=postgresql state=stopped

- name: wait for postgresql to be stopped
  wait_for: port={{ postgresql_port }} state=stopped

- name: drop cluster
  command: pg_dropcluster {{ postgresql_cluster_version }} {{ postgresql_cluster_name }}
  become_user: "{{ postgresql_user }}"
  ignore_errors: true

- name: create cluster
  command: pg_createcluster {{ postgresql_cluster_version }} {{ postgresql_cluster_name }}
  become_user: "{{ postgresql_user }}"

- name: ensure postgresql service is started
  service: name=postgresql state=started

- name: wait for postgresql to be started
  wait_for: port={{ postgresql_port }} state=started

- name: restore backup file
  command: bash -lc "gunzip < {{ postgresql_restore_gzip_file_path }} | psql"
  async: 3600
  poll: 10
  become_user: "{{ postgresql_user }}"
