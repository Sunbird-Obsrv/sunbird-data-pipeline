---

- name: Install unzip
  apt:
    name: unzip
    update_cache:  yes
    state: present

- name: download a file from azure storage
  become: true
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ cloud_storage_influxdbbackup_foldername }}"
    blob_file_name: "{{ influxdb_restore_file_name }}"
    local_file_or_folder_path: "/tmp/{{ influxdb_restore_file_name  }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  when: cloud_service_provider == "azure"

- name: download a file from aws s3
  include_role:
    name: aws-cloud-storage
    tasks_from: download.yml
  vars:
    s3_bucket_name: "{{ cloud_storage_influxdbbackup_bucketname }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    local_file_or_folder_path: "{{ postgres_restore_dir }}/{{ influxdb_restore_file_name }}"
    s3_path: "{{ cloud_storage_influxdbbackup_foldername }}/{{ influxdb_restore_file_name }}"
  when: cloud_service_provider == "aws"

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_storage_service_account_name: "{{ cloud_management_storage_accountname }}"
    gcp_storage_key_file: "{{ cloud_management_storage_secret }}"
    gcp_bucket_name: "{{ cloud_storage_influxdbbackup_bucketname }}"
    gcp_path: "{{ cloud_storage_influxdbbackup_foldername }}/{{ influxdb_restore_file_name }}"
    local_file_or_folder_path: "/tmp/{{ influxdb_restore_file_name }}"
  when: cloud_service_provider == "gcloud"

- name: Unarchieve backup file
  unarchive:
    src: /tmp/{{ influxdb_restore_file_name }}
    dest: /tmp
    remote_src: yes

- name: Drop db if exists
  shell: "curl -XPOST http://localhost:8086/query --data-urlencode 'q=DROP DATABASE monitoring_events'"

- name: Restore influxdb data
  shell: influxd restore -portable influxdb_backup
  args:
    chdir: /tmp

- name: Start influxdb
  systemd:
    name: influxdb
    state: started

- name: Verification step - analytics_metrics
  shell: "curl http://localhost:8086/query?pretty=true --data-urlencode 'db=monitoring_events' --data-urlencode 'q=SELECT count(*) FROM analytics_metrics'"
  register: analyticsmetrics

- debug:
    var: analyticsmetrics.stdout_lines

- name: Verification step -  pipeline_metrics
  shell: "curl http://localhost:8086/query?pretty=true --data-urlencode 'db=monitoring_events' --data-urlencode 'q=SELECT count(*) FROM pipeline_metrics'"
  register: pipelinemetrics

- debug:
    var: pipelinemetrics.stdout_lines
