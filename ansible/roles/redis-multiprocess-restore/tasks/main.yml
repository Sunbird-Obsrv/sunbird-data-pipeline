---

- name: Create the directory
  become: yes
  become_user: "{{ redis_restore_user }}"
  file: path=/tmp/{{ item }} state=directory recurse=yes
  with_items: "{{ redis_restore_process }}"

- name: download a file from azure storage
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ cloud_storage_dpredisbackup_foldername }}"
    blob_file_name: "{{ item }}/{{ redis_restore_file_name }}"
    local_file_or_folder_path: "/tmp/{{ item }}/{{ redis_restore_file_name }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  with_items: "{{ redis_restore_process }}"
  when: cloud_service_provider == "azure"

- name: download a file from aws s3
  become: true
  include_role:
    name: aws-cloud-storage
    tasks_from: download.yml
  vars:
    s3_bucket_name: "{{ cloud_storage_dpredisbackup_bucketname }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    local_file_or_folder_path: "/tmp/{{ item }}/{{ redis_restore_file_name }}"
    s3_path: "{{ cloud_storage_dpredisbackup_foldername }}/{{ item }}/{{ redis_restore_file_name }}"
  when: cloud_service_provider == "aws"  

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_bucket_name: "{{ cloud_storage_dpredisbackup_bucketname }}"
    gcp_path: "{{ cloud_storage_dpredisbackup_foldername }}/{{ item }}/{{ redis_restore_file_name }}"
    local_file_or_folder_path: "/tmp/{{ item }}/{{ redis_restore_file_name }}"
  with_items: "{{ redis_restore_process }}"
  when: cloud_service_provider == "gcloud"

- name: get redis process ports to stop 
  shell: "echo {{ lookup ('vars', item + '_port') }}"
  register: ports
  with_items: "{{ redis_restore_process }}" 

- name: stop redis to restore backup 
  become: yes
  become_user: "{{ redis_restore_user }}"
  shell: "echo shutdown | {{ analytics_user_home }}/redis-stable/src/redis-cli -p {{ item.stdout }}"
  with_items: "{{ ports.results }}"

- name: Extract backup zip into tmp
  become: yes
  become_user: "{{ redis_restore_user }}"
  unarchive:
    src: "/tmp/{{ item }}/{{ redis_restore_file_name }}"
    dest: "/tmp/{{ item }}"
    remote_src: True
  with_items: "{{ redis_restore_process }}"  

- name: copy dump.rdb files to data dir
  become: yes
  become_user: "{{ redis_restore_user }}"
  shell: cp /tmp/{{ item }}/{{ item }}-dump.rdb {{ analytics_user_home }}/redis-stable/{{ item }}-dump.rdb
  with_items: "{{ redis_restore_process }}"

- name: start redis
  become: yes
  become_user: "{{ redis_restore_user }}"
  command: '{{ analytics_user_home }}/redis-stable/src/redis-server {{ analytics_user_home }}/redis-stable/redis-{{ item }}.conf'
  with_items: "{{ redis_restore_process }}"

- name: Keyspace info
  shell: "echo info keyspace | {{ analytics_user_home }}/redis-stable/src/redis-cli -p {{ item.stdout }}"
  register: restoreinfo
  with_items: "{{ ports.results }}"

- debug: var=item.stdout_lines
  with_items: "{{ restoreinfo.results }}"  
