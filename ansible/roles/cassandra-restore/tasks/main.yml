- set_fact:
    artifact: "cassandra-backup-{{ artifact_version }}.tar.gz"

- set_fact:
    artifact_path: "/tmp/{{ artifact }}"
    artifacts_container: "{{ cassandra_backup_azure_container_name }}"
    cassandra_restore_dir: /tmp/cassandra_backup

- name: download a file from azure storage
  become: true
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ cassandra_backup_storage }}"
    blob_file_name: "{{ artifact }}"
    local_file_or_folder_path: "{{ artifact_path }}"
    storage_account_name: "{{ azure_management_storage_account_name }}"
    storage_account_key: "{{ azure_management_storage_account_key }}"
  when: cloud_service_provider == "azure"

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_bucket_name: "{{ gcloud_management_bucket_name }}"
    dest_folder_name: "{{ artifacts_container }}"
    dest_file_name: "{{ artifact }}"
    local_file_or_folder_path: "{{ cassandra_restore_dir }}"
  when: cloud_service_provider == "gcloud"

- name: extract the archive
  unarchive: src=/tmp/{{ artifact }} dest=/tmp remote_src=yes

- name: copy the restore script
  template: src=cassandra_restore.j2 dest=/tmp/cassandra_restore.py mode=0755

- name: Check doc_root path
  shell: ls -all {{ cassandra_restore_dir }}
  register: doc_data

- name: print doc_root to console
  debug:
    var: doc_data

- name: load the schema
  shell: cqlsh -f db_schema.cql
  args:
    chdir: "{{ cassandra_restore_dir }}"
  async: 3600
  poll: 10
  ignore_errors: yes

- name: run the backup script
  shell: python cassandra_restore.py --host $(hostname -i) cassandra_backup
  args:
    chdir: /tmp
  async: 3600
  poll: 10
  
- name: clean up backup dir after restore
  file: path={{ item }} state=absent
  with_items:
     - "{{ artifact }}"
     - "{{ cassandra_restore_dir }}"
