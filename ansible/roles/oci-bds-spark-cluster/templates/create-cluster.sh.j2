#! /bin/bash
# Subnet id will generate from env variable
# Version 1 Author Nikesh Gogia and Ali Shemshadi

ambari_user="${1}"
cluster_password="${2}"
key_alias="{{key_alias}}"
user_id="{{user_id}}"
subnet="{{subnet_id}}"
compartment_id="{{compartment_id}}"
display_name="{{display_name}}"
workernode="{{workernode}}"
cluster_public_key="{{public_key}}"

cstate='SUCCEEDED' 
cwait=2500

echo "RECEIVED ALL ENV VARIABLES"

AMBARI_USER=$ambari_user
AMBARI_PWD=$cluster_password

function get_bdsid() {
    list_param=`oci bds instance list --compartment-id $compartment_id`
    bdsid="NULL"
    # echo $list_param | jq '.data'
    state="ACTIVE"
    disname="NULL"
    for k in $(jq '.data | keys | .[]' <<< "$list_param"); do
        # echo $k
        cstate=`echo $list_param | jq -r '.data['$k']["lifecycle-state"]'`
        if [ $cstate = $state ]; then
            disname=`echo $list_param | jq -r '.data['$k']["display-name"]'`
            if [ $disname = $display_name ]; then
                bdsid=`echo $list_param | jq -r '.data['$k']["id"]'`            
            fi

        fi   
        echo "BDS ID" 
        echo $bdsid
    done
}

function getLivyip() {

    export bds_instance_id=$bdsid
    bdsjson=$(oci bds instance get --bds-instance-id $bds_instance_id)
    # echo "AMBARI URL"
    ambari_url=`echo $bdsjson | jq -r '.data["cluster-details"]["ambari-url"]'`
    # echo $ambari_url
    livyip="NULL"
    cnode="UTILITY"
    for k in $(jq '.data["nodes"] | keys | .[]' <<< "$bdsjson"); do
        node=`echo $bdsjson | jq -r '.data["nodes"]['$k']["node-type"]'`
        if [ $node = "$cnode" ]; then
            livyip=`echo $bdsjson | jq -r '.data["nodes"]['$k']["ip-address"]'`
        fi
    done
    echo "LIVY IP"
    echo $livyip

}

getlivyclustername() {
    cdet=$(curl -v  -u $AMBARI_USER:$AMBARI_PWD -k -X GET https://$livyip:7183/api/v1/clusters/)
    echo $cdet
    for k in $(jq '.items | keys | .[]' <<< "$cdet"); do
        # echo $k
        cluster_name=`echo $cdet | jq -r '.items['$k']["Clusters"]["cluster_name"]'`
        echo $cluster_name
    done
    echo "CLUSTER NAME"

}

function get_apidetails() {

    export bds_instance_id=$bdsid

    listapijson=$(oci bds bds-api-key list --bds-instance-id $bds_instance_id)

    #echo $listapijson | jq '.data[1]["key-alias"]'
    id="NULL"
    ctype="ACTIVE"
    for k in $(jq '.data | keys | .[]' <<< "$listapijson"); do
        type=`echo $listapijson | jq -r '.data['$k']["lifecycle-state"]'`
        if [ $type = "$ctype" ]; then
            id=`echo $listapijson | jq -r '.data['$k']["id"]'`
        fi
    done

    echo $id

    export api_key_id=$id

    list_api=`oci bds bds-api-key get --api-key-id $api_key_id --bds-instance-id $bds_instance_id `

    #echo $list_api | jq '.data'

    data=`echo $list_api | jq '.data'`
    echo "API DETAILS"
    echo $data
    region=`echo $list_api | jq -r '.data["default-region"]'`
    fingerprint=`echo $list_api | jq -r '.data["fingerprint"]'`
    keyalias=`echo $list_api | jq -r '.data["key-alias"]'`
    lifecyc=`echo $list_api | jq -r '.data["lifecycle-state"]'`
    tm=`echo $list_api | jq -r '.data["time-created"]'`
    usid=`echo $list_api | jq -r '.data["user-id"]'`
    tenid=`echo $list_api | jq -r '.data["tenant-id"]'`
    pemfilepath=`echo $list_api | jq -r '.data["pemfilepath"]'`

}

function update_bds_config(){
   #change below variables for your cluster
   CONFIG_FILE_TO_UPDATE=""

   #Used when for restarting components after config update
   #Wait time before we poll for restart status. Default 30 seconds. Meaning, We poll for restart status every 30 seconds
   WAIT_TIME_IN_SEC=30

   #No of tries before we give up on the restart status. Default 20. With default WAIT_TIME_IN_SEC as 30, At max we wait for 10(20*30=600 seconds) minutes before we give up.
   RETRY_COUNT=20

   #INTERNAL USE ONLY
   propObj=""

   get_apidetails
   getUtilityNodesIps=$livyip
   getlivyclustername
   echo $getUtilityNodesIps
   getClusterName=$cluster_name
   for utilityNodeIp in $getUtilityNodesIps
   do
      echo "Current utility node ip: $utilityNodeIp"
      str1=$(nslookup $utilityNodeIp | awk -v var=$utilityNodeIp  '/name =/{print var "\t", $4}')
      CONFIG_FILE_TO_UPDATE="core-site" #this is the file we're updating in this example
      propObj=$(get_property_json)
      echo $propObj
      echo "calling add properties"

      #update key value pairs. Multiple key value pairs can be updated before doing update_ambari_config
      add_properties "fs.oci.client.auth.fingerprint" $fingerprint
      add_properties "fs.oci.client.auth.passphrase" $cluster_password
      add_properties "fs.oci.client.auth.pemfilepath" $pemfilepath
      add_properties "fs.oci.client.auth.tenantId" $tenid
      add_properties "fs.oci.client.auth.userId" $usid
      add_properties "fs.oci.client.regionCodeOrId" $region
      add_properties "fs.s3.buffer.dir" /tmp
      #Update it to ambari
      echo "updating ambari config"
      update_ambari_config
    
      echo "restarting all required components"
      restart_required_components
      
   done

}


#Method to collect the current config
function get_property_json(){ 
    allConfs=$(curl -v -u $AMBARI_USER:$AMBARI_PWD -k -X GET https://$utilityNodeIp:7183/api/v1/clusters/$getClusterName?fields=Clusters/desired_configs) #to get all the configs
    currVersionLoc=".Clusters.desired_configs.\"$CONFIG_FILE_TO_UPDATE\".tag"  #fetching current version for property
    propVersion=$(echo $allConfs | jq $currVersionLoc | tr -d '"')
    propJson=$(curl -u $AMBARI_USER:$AMBARI_PWD -H "X-Requested-By: ambari" -k -X GET "https://$utilityNodeIp:7183/api/v1/clusters/$getClusterName/configurations?type=$CONFIG_FILE_TO_UPDATE&tag=$propVersion") #fetch property json
    propLoc=".items[].properties"
    propKeyVal=$(echo $propJson | jq $propLoc)
    propObj="{\"properties\":$propKeyVal}"
    echo $propObj
}

#Method to add/update key value pair to existing config
function add_properties(){
    echo $1 $2
    echo $propObj
    propObj=$(echo $propObj | jq '.properties += { "'$1'": "'$2'" }')
    echo $propObj
}

#Method to update config in ambari
function update_ambari_config(){
    parseableAddedProp=$(echo $propObj | jq '.properties')
    echo $parseableAddedProp
    timestamp=$(date +%s)
    newVersion="version$timestamp"
    finalJson='[{"Clusters":{"desired_config":[{"type":"'$CONFIG_FILE_TO_UPDATE'","tag":"'$newVersion'","properties":'$parseableAddedProp'}]}}]'
    echo "CALING AMABRI API"
    response_body_amb=$(curl -u $AMBARI_USER:$AMBARI_PWD -H "X-Requested-By: ambari" -k -X PUT -d "$finalJson" "https://$utilityNodeIp:7183/api/v1/clusters/$getClusterName")
    echo $response_body_amb
    echo "DONE AMABRI API"
}

#Method to restart required components
function restart_required_components(){
    echo "restarting all required components"
    response_body=$(curl -u $AMBARI_USER:$AMBARI_PWD -H "X-Requested-By: ambari" -k -X POST -d '{"RequestInfo":{"command":"RESTART","context":"Restart all required services from bootstrap script","operation_level":"host_component"},"Requests/resource_filters":[{"hosts_predicate":"HostRoles/stale_configs=true&HostRoles/cluster_name='$getClusterName'"}]}' "https://$utilityNodeIp:7183/api/v1/clusters/$getClusterName/requests")
    
    echo "printing response_body: $response_body"
    
    idLoc=".Requests.id"
    requestId=$(echo $response_body | jq $idLoc)
    echo "request id is : $requestId"
    
    current_count=0
    while [[ $current_count -lt $RETRY_COUNT ]];
    do
        current_count=$((current_count+1))
        response=$(curl -v -u $AMBARI_USER:$AMBARI_PWD -k -X GET https://$utilityNodeIp:7183/api/v1/clusters/$getClusterName/requests/$requestId)
        request_status=$(echo $response | jq -r ".Requests.request_status")
        echo "printing request_status: $request_status"
        if [[ $request_status == "IN_PROGRESS" ]] || [[ $request_status == "PENDING" ]]; then
            echo "current_count is : $current_count"
            sleep $WAIT_TIME_IN_SEC
        elif [[ $request_status == "COMPLETED" ]]; then
            echo "Restart successful"
            break
        fi
    done
}

function create_api(){
   export bds_instance_id=$bdsid
   export key_alias=$key_alias # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/bds/bds-api-key/create.html#cmdoption-key-alias
   export passphrase=$b64p # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/bds/bds-api-key/create.html#cmdoption-passphrase
   export user_id=$user_id
   capi='SUCCEEDED'
   oci bds bds-api-key create --bds-instance-id $bds_instance_id --key-alias $key_alias --passphrase $passphrase --user-id $user_id --wait-for-state $capi --max-wait-seconds $cwait
}


# Below is tenancy

function create_cluster() {

   export compartment_id=$compartment_id

   master=1
   utility=1

   worker=$workernode # This has to be replaced with Jenkins Paramter
   
   # Begin script in case all parameters are correct
   echo "Generating json woth $master master ndoes $utility utility nodes and $worker worker nodes"
   json="["

   for i in `seq 1 $master`
   do
      json="$json{\"blockVolumeSizeInGBs\": 1000,\"nodeType\": \"MASTER\",\"shape\": \"VM.Standard.E4.Flex\",\"shapeConfig\": {  \"memoryInGBs\": {{head_node_memory}},  \"ocpus\": {{head_node_cpu}}},\"subnetId\": \"$subnet\"   }"
   done

   for i in `seq 1 $utility`
   do
      json="$json,{\"blockVolumeSizeInGBs\": 1000,\"nodeType\": \"UTILITY\",\"shape\": \"VM.Standard.E4.Flex\",\"shapeConfig\": {  \"memoryInGBs\": {{head_node_memory}},  \"ocpus\": {{head_node_cpu}}},\"subnetId\": \"$subnet\"   }"
   done

   for i in `seq 1 $worker`
   do
      json="$json,{\"blockVolumeSizeInGBs\": 1000,\"nodeType\": \"WORKER\",\"shape\": \"VM.Standard.E4.Flex\",\"shapeConfig\": {  \"memoryInGBs\": {{worker_node_memory}},  \"ocpus\": {{worker_node_cpu}}},\"subnetId\": \"$subnet\"   }"
   done

   json="$json]"
   printf "$json" > "nodes.json"
   echo "File successfully generated and saved as nodes.json"

   echo "TRIGGERED CREATING THE BDS CLUSTER"

   export cluster_public_key=$public_key
   export cluster_version="ODH2_0"
   export display_name=$display_name
   export is_high_availability='false' 
   export is_secure='false' 
   cmd="oci bds instance create --cluster-admin-password '$b64p' --cluster-public-key '$cluster_public_key' --cluster-version '$cluster_version' --compartment-id '$compartment_id' --display-name '$display_name' --is-high-availability $is_high_availability --is-secure $is_secure --wait-for-state $cstate --max-wait-seconds $cwait --nodes file://nodes.json "
   #echo $cmd
   create_response=$(eval "$cmd")
   echo "CLUSTER CREATED SUCCESSFULLY"
}

function replace_host() {
    echo "REPLACE THE HOSTS"
    echo "" >> {{inventory_dir}}/hosts
    echo "[bds-livy-node]" >> {{inventory_dir}}/hosts
    echo "$livyip ansible_ssh_user=opc" >> {{inventory_dir}}/hosts
    echo "" >> {{inventory_dir}}/hosts

}

# MAIN TO START

b64p=`echo  -n $cluster_password | base64`
echo $b64p
echo $compartment_id

echo "CREATING BDS CLUSTER"

create_cluster

echo "FETCHING BDS ID"

get_bdsid # This sets BDS ID

echo "GET LIVY-AMBARI IP"

getLivyip # This will be ambari ip also

replace_host

echo "CREATE OBJECT STORAGE API KEY"

create_api

echo "UPDATE BDS AMBARI CONFIG"

get_apidetails

update_bds_config

echo "BDS Config Completed and Ambari Restarted"

