@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            folder = new File("$WORKSPACE/.git")
            if (folder.exists())
            {
               println "Found .git folder. Clearing it.."
               sh'git clean -fxd'
            }
            checkout scm

        }
       
            ansiColor('xterm') {
                 values = lp_dp_params()
                stage('get artifact') {
                    currentWs = sh(returnStdout: true, script: 'pwd').trim()
                    artifact = values.artifact_name + ":" + values.artifact_version
                    values.put('currentWs', currentWs)
                    values.put('artifact', artifact)
                    artifact_download(values)
                }
                stage('deploy artifact'){
                    sh """
                       unzip ${artifact}
                      
                       if [ -f batch-models-2.0.jar ]; then
                            echo "batch-models-2.0.jar exist"
                            mv batch-models-2.0.jar ansible
                       fi
                       if [ -f job-manager-2.0.jar ]; then
                            echo "job-manager-2.0.jar exist"
                            mv job-manager-2.0.jar ansible
                       fi
                       if [ -f analytics-framework-2.0.jar ]; then
                            echo "analytics-framework-2.0.jar exist"
                            mv analytics-framework-2.0.jar ansible
                       fi
                       if [ -f scruid_2.11-2.3.2.jar ]; then
                            echo "scruid_2.11-2.3.2.jar exist"
                            mv scruid_2.11-2.3.2.jar ansible
                       fi
                    """
                    ansiblePlaybook = "--extra-vars \"remote=${params.remote}\" ${currentWs}/ansible/lpa_data-products_deploy.yml"
                    ansibleExtraArgs = " --tags ${params.module} --vault-password-file /var/lib/jenkins/secrets/vault-pass"
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
                    ansible_playbook_run(values)
                    currentBuild.result = "SUCCESS"
                    currentBuild.description = "Artifact: ${values.artifact_version}, Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
                    archiveArtifacts artifacts: "${artifact}", fingerprint: true, onlyIfSuccessful: true
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                }
            }
         summary()
     }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    finally {
        slack_notify(currentBuild.result)
        email_notify()
    }
}
