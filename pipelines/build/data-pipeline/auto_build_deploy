@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        ansiColor('xterm') {
            stage('Checkout') {
                cleanWs()
                if (!tag_name.contains(env.public_repo_branch)) {
                    println("Error.. Tag does not contain " + env.public_repo_branch)
                    error("Oh ho! Tag is not a release candidate.. Skipping build")
                 }
                cleanWs()
                def scmVars = checkout scm
                checkout scm: [$class: 'GitSCM', branches: [[name: "refs/tags/$tag_name"]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                artifact_version = tag_name + "_" + commit_hash
                echo "artifact_version: "+ artifact_version
            }
        }

       //     stage 'Build'
                sh ("mvn -f data-pipeline/pom.xml \
                -Dlog4j.configuration=$WORKSPACE/logs \
                -Dcobertura.report.format=xml clean cobertura:cobertura package")
            

     //       stage Publish_test_results
               cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false 
            

     //       stage Archive artifacts
                sh """
                        mkdir dp_artifacts
                        cp data-pipeline/distribution/target/distribution-0.0.1-distribution.tar.gz dp_artifacts
                        zip -j dp_artifacts.zip:${artifact_version} dp_artifacts/*
                    """
                archiveArtifacts artifacts: "dp_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
                sh """echo {\\"artifact_name\\" : \\"dp_artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
                archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                currentBuild.result = "SUCCESS"
                currentBuild.description = "Artifact: ${artifact_version}, Public: ${params.github_release_tag}"
            
            currentBuild.result = "SUCCESS"    
            slack_notify(currentBuild.result, tag_name)
            email_notify()  
            auto_build_deploy()
        }

    catch (err) {
        currentBuild.result = "FAILURE"
        slack_notify(currentBuild.result, tag_name)
        email_notify()
        throw err
    }
    
}
